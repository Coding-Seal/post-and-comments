package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"post-and-comments/internal/adapters/graph/generated"
	"post-and-comments/internal/adapters/graph/grmodels"
	"post-and-comments/internal/models"
)

// CommentCreate is the resolver for the commentCreate field.
func (r *mutationResolver) CommentCreate(ctx context.Context, comment grmodels.CommentInput) (*grmodels.Comment, error) {
	authorID, err := models.ParseID(comment.Author.ID)
	if err != nil {
		return nil, err
	}

	commentText, err := models.NewCommentText(comment.Text)
	if err != nil {
		return nil, err
	}

	postID, err := models.ParseID(comment.PostID)
	if err != nil {
		return nil, err
	}

	parentID, err := models.ParseID(comment.ParentComment)
	if err != nil {
		return nil, err
	}

	mComment := &models.Comment{
		AuthorID: authorID,
		Text:     commentText,
		PostID:   postID,
		Replies:  nil,
	}

	err = r.CommentSrv.AddComment(ctx, mComment, parentID)
	if err != nil {
		return nil, err
	}

	return r.toGrComment(ctx, mComment), nil
}

// PostCreate is the resolver for the postCreate field.
func (r *mutationResolver) PostCreate(ctx context.Context, post grmodels.PostInput) (*grmodels.Post, error) {
	authorID, err := models.ParseID(post.AuthorID)
	if err != nil {
		return nil, err
	}

	postText, err := models.NewPostText(post.Text)
	if err != nil {
		return nil, err
	}

	mPost := &models.Post{
		AuthorID:        authorID,
		Text:            postText,
		DisableComments: post.DisableComments,
	}

	err = r.PostSrv.AddPost(ctx, mPost)
	if err != nil {
		return nil, err
	}

	return r.toGrPosts(ctx, mPost, nil), nil
}

// DisableComments is the resolver for the disableComments field.
func (r *mutationResolver) DisableComments(ctx context.Context, postID string) (*grmodels.Post, error) {
	mPostID, err := models.ParseID(postID)
	if err != nil {
		return nil, err
	}

	err = r.PostSrv.DisableComments(ctx, mPostID)
	if err != nil {
		return nil, err
	}

	mPost, err := r.PostSrv.Post(ctx, mPostID)
	if err != nil {
		return nil, err
	}

	return r.toGrPosts(ctx, mPost, nil), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
